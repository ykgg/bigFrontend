web前端工程化的工具：
  node.js 
  webpack

打包器： 
  写写node ,前端的工具都离开不 node 
  服务webpack ，内容前置  

1 起了一个简单的配置运行 webpack 打包
2 梳理 webpack 打包时执行的文件 
  执行 npx webpack 的时候走的就是 webpack/bin/webpack.js 文件
  在调试上有一些停留（）
  执行 npx webpack 之后，在 webpack 内部一顿操作之后最终找到的是 webpack-cli/bin/cl.js 
3 为什么在这里费事的看这个：
  在开始的时候我是使用了原生的 webpack 执行的打包操作，然后产出了 dist 目录
  而今晚我们想要实现的是走自己写的 webpack.js 来实现一个打包功能 
  因此，我们需要先跑一次原生的流程，所以要调试定位入口文件

4 对于 cli 工具来说都会有一个需要处理的逻辑： 命令行参数，process.argv ， 我们一般都会采用第三方的包
  自己开发时常用的就是 commonder  
    webpack---> yargs 
    zce ----》
  
5 对于 webpack 打包来说，所谓的参数： config.js  + 内置 + 命令行传入的


6 在 cli.js 中 【 处理参数，将参数传递给具体的业务逻辑进行使用 】
  01 引入 yargs 来处理配置参数 
  02 先将 webpack.config.js 中的配置信息拿起来
  03 拿到基础的 options 之后，调用了一个 processOptions 方法将它进行了处理，最终产出了一个 outputOptions 
  此时 cli.js 的核心功能之一就算完成了（ 拿参数 ）
  04 参数处理完成之后就需要使用它，在 webpack 中有一个叫 compiler 的对象，它贯穿整个打包过程（  ）
  05 此时就是利用原生的 webpack 调用，传入处理后的 options ，返回了一个 compiler ，用它来启动打包
  06 最后由 compiler 来调用 run 方法开启本次打包工作  

01 拿到 webpack.config.js 中的配置信息 
02 导入原生的 webpack 调用这个方法，接收 config 
03 上述调用会返回一个compiler 对象，由它来调用 run 方法，就可以开启打包了  

part2 

01 上述的分析目的就是为了服务于我后续自己写一个工具包，lgPack ，然后我就执行自己的工具包当中的index.js 让它可以具有与原生 webpack 一样的打包功能（ 打包 ）

02 自定义一个 lgPack 包，实现打包功能
  01 webpack是一个函数 
  02 这个函数调用之后返回是一个对象（因为它有一个 run 方法）

03 自定义的 run 方法走通之后，我们就梳理出了打包需要的二个大步骤
  01 打包自己和自己所依赖的模块， 生成一个chunk代码块  
    分析一下原生 webpack 打包后的文件内容
    核心： 将组装好的一个{key:value}结构，传给了 modules 
    __webpack_require__ 方法是 webpack 内部自定义的一个方法，专门用于实现不同类型模块的导包操作 
    这个方法第一次被调用的时候传入的一定是 入口模块 id
    第一次调用的时候，如果缓存里没有加载过当前的模块，那么就会创建一个空对象叫 module 
    它里面有三个属性，
      其中： exports 就是一个空对象用于加载某个模块将来 exports  export 导出的内容
      i: 标识符
      l: 布尔值表示当前模块是否已加载过
    确定了 module 之后，就会查找当前模块 id 所对应的函数进行调用，此时会传入多个参数 
    最终我们要做的是打包器，而今晚我们想完成的就是参数的组装，至于说函数体内的 __webpack_require__ 方法我们拿来主义直接用

  /**
 * 01 原生 webpack 打包之后生成的文件是一个匿名函数自调用，它接收一个参数，这个参数是对象
 * 02 这个对象有很明显的特征
 *  思考：当我们以 index.js 做为入口来执行打包的时候，具体有几个文件需要被打包呢？ 3个（index.js  a b）
 *  2-1 它的键我们称之为叫模块 id ，本质就是需要被打包的模块的相对路径
 *  2-2 它的值也非常有意思，是一个函数，这个函数会接收N（2 3）个参数， 它的函数体就是当前被打包模块的内容
 *  2-3 但是对于那些又导入了其它模块的被打包模块来说，它的函数体内容会稍有变（ 将import 或者 require 关键字换成了 __webpack_require__ 方法， 同时它还将模块路径替换成了相对路径 ）
 */

  02 将打包后的 chunk 利用文件系统写入到磁盘文件中  

part3 动手编写 

01 定义一个 buildModule 方法
  核心功能就是将入口 index.js 自己和它所依赖的 a b 都串在一起，所谓的串在一起，无非就是将它里面的 require 方法替换为 
  __webpack_require__ ，将 require 的值 替换为 './src/a.js' './src/lg/b.js' ,最后再把它们各自里面的内容读取
  出来，与刚才提到的相对路径组装成一个 key value 结构

  {
    './src/a.js': 'console.log("aaaaa")', 
    './src/b.js': 'console.log("bbbbb")', 
    ..... 
  }
  如果我们想要完成上述的操作，那么就需要准备几个东西：
    每个被打包模块的完整路径： 只有具备了完整路径，我们才能使用 fs 读内容
    每个被打包模块的相对路径 ：因为我们在组装键值对的时候用到的是相对路径 
    完成路径和文件操作的 fs 及 path 模块

